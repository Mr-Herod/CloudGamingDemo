// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gaming

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GamingServiceClient is the client API for GamingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GamingServiceClient interface {
	StartGame(ctx context.Context, in *StartGameReq, opts ...grpc.CallOption) (*StartGameRsp, error)
}

type gamingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGamingServiceClient(cc grpc.ClientConnInterface) GamingServiceClient {
	return &gamingServiceClient{cc}
}

func (c *gamingServiceClient) StartGame(ctx context.Context, in *StartGameReq, opts ...grpc.CallOption) (*StartGameRsp, error) {
	out := new(StartGameRsp)
	err := c.cc.Invoke(ctx, "/gaming.GamingService/StartGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GamingServiceServer is the server API for GamingService service.
// All implementations must embed UnimplementedGamingServiceServer
// for forward compatibility
type GamingServiceServer interface {
	StartGame(context.Context, *StartGameReq) (*StartGameRsp, error)
	mustEmbedUnimplementedGamingServiceServer()
}

// UnimplementedGamingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGamingServiceServer struct {
}

func (UnimplementedGamingServiceServer) StartGame(context.Context, *StartGameReq) (*StartGameRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartGame not implemented")
}
func (UnimplementedGamingServiceServer) mustEmbedUnimplementedGamingServiceServer() {}

// UnsafeGamingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GamingServiceServer will
// result in compilation errors.
type UnsafeGamingServiceServer interface {
	mustEmbedUnimplementedGamingServiceServer()
}

func RegisterGamingServiceServer(s grpc.ServiceRegistrar, srv GamingServiceServer) {
	s.RegisterService(&GamingService_ServiceDesc, srv)
}

func _GamingService_StartGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartGameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GamingServiceServer).StartGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gaming.GamingService/StartGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GamingServiceServer).StartGame(ctx, req.(*StartGameReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GamingService_ServiceDesc is the grpc.ServiceDesc for GamingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GamingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gaming.GamingService",
	HandlerType: (*GamingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartGame",
			Handler:    _GamingService_StartGame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gaming.proto",
}
