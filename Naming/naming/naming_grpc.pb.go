// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package naming

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NamingServiceClient is the client API for NamingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NamingServiceClient interface {
	RegisterService(ctx context.Context, in *RegisterServiceReq, opts ...grpc.CallOption) (*RegisterServiceRsp, error)
	FindService(ctx context.Context, in *FindServiceReq, opts ...grpc.CallOption) (*FindServiceRsp, error)
}

type namingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNamingServiceClient(cc grpc.ClientConnInterface) NamingServiceClient {
	return &namingServiceClient{cc}
}

func (c *namingServiceClient) RegisterService(ctx context.Context, in *RegisterServiceReq, opts ...grpc.CallOption) (*RegisterServiceRsp, error) {
	out := new(RegisterServiceRsp)
	err := c.cc.Invoke(ctx, "/naming.NamingService/RegisterService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namingServiceClient) FindService(ctx context.Context, in *FindServiceReq, opts ...grpc.CallOption) (*FindServiceRsp, error) {
	out := new(FindServiceRsp)
	err := c.cc.Invoke(ctx, "/naming.NamingService/FindService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NamingServiceServer is the server API for NamingService service.
// All implementations must embed UnimplementedNamingServiceServer
// for forward compatibility
type NamingServiceServer interface {
	RegisterService(context.Context, *RegisterServiceReq) (*RegisterServiceRsp, error)
	FindService(context.Context, *FindServiceReq) (*FindServiceRsp, error)
	mustEmbedUnimplementedNamingServiceServer()
}

// UnimplementedNamingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNamingServiceServer struct {
}

func (UnimplementedNamingServiceServer) RegisterService(context.Context, *RegisterServiceReq) (*RegisterServiceRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterService not implemented")
}
func (UnimplementedNamingServiceServer) FindService(context.Context, *FindServiceReq) (*FindServiceRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindService not implemented")
}
func (UnimplementedNamingServiceServer) mustEmbedUnimplementedNamingServiceServer() {}

// UnsafeNamingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NamingServiceServer will
// result in compilation errors.
type UnsafeNamingServiceServer interface {
	mustEmbedUnimplementedNamingServiceServer()
}

func RegisterNamingServiceServer(s grpc.ServiceRegistrar, srv NamingServiceServer) {
	s.RegisterService(&NamingService_ServiceDesc, srv)
}

func _NamingService_RegisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamingServiceServer).RegisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/naming.NamingService/RegisterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamingServiceServer).RegisterService(ctx, req.(*RegisterServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamingService_FindService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamingServiceServer).FindService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/naming.NamingService/FindService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamingServiceServer).FindService(ctx, req.(*FindServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

// NamingService_ServiceDesc is the grpc.ServiceDesc for NamingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NamingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "naming.NamingService",
	HandlerType: (*NamingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterService",
			Handler:    _NamingService_RegisterService_Handler,
		},
		{
			MethodName: "FindService",
			Handler:    _NamingService_FindService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "naming.proto",
}
